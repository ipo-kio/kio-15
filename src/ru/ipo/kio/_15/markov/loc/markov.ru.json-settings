/*Это файл с текстами для программы.
Файл оформляется в виде расширенного json формата, в отличие от json здесь допустимы комментарии, такие как этот,
и многострочные строки, которые начинаются на <<< и заканчиваются >>> */
{
    /*Первые несколько строчек текста необходимы всегда, они описывают заголовок задачи, тексты условия и помощи*/

    "title": "Алгорифм Маркова",
     "title0": "Прополка",
     "title1": "Рокировки",
      "title2": "Алгорифм Маркова — необычный калькулятор",


     /*Этот заголовок пишется вверху окна. Цифра 1 означает, что заголовок используется для первого уровня*/
    "statement0": <<<
        <p>
        В огороде грядка морковки заросла сорняками. Нужно удалить часть сорняков и проредить морковку так, чтобы слева и справа от каждой морковки ничего не росло. Освободившееся от сорняков пространство нужно засадить цветами (желаемый результат показан на рисунке).
        </p>
        <p>
        Работу осуществляет автомат, управление которым осуществляется через указания, что и чем надо заменить. Указания для робота записываются в строчках.
        Автомат движется слева направо и выполняет первое указание, пока его можно выполнить. Когда оно не применимо, автомат выполняет второе указание, а после его выполнения снова начинает пробовать применить первое указание. Если автомат не может выполнить ни первое ни второе указание он пробует выполнить третье и, если оно применимо, то сразу после выполнения переходит к первому указанию и так далее.
        Есть одно ограничение: в обоих частях указания должно быть одинаковое число объектов.
        </p>
        <p>
        Лучшим считается набор указаний, который приводит к меньшему числу различий между исходным и желаемым состоянием грядки. Если автомат выполняет работу правильно, то лучшим считается тот, у которого меньше указаний. Если число указаний в решениях одинаково, то лучше тот набор указаний, который позволяет быстрее обработать грядку.
        Лучшее решение сохраняется программой автоматически как рекорд. При желании можно также запомнить любой набор указаний (любое решение).
        </p>
      >>>,
	"help0":<<<
	    <p>Новая строчка указаний создается с помощью соответствующей кнопки.
           При составлении указания картинки объектов перетягиваются в окна правил. Для того, чтобы увеличить в правиле число окон, нужно перетянуть объект на один из уже перетянутых в правило объектов.
           Для правки указаний его строчки можно удалять соответствующими кнопками.
           Проигрывание алгоритма можно осуществить пошагово (можно делать обратные шаги), в анимационном режиме и мгновенно.
           Кнопка очищения возвращает ситуацию в исходное состояние.
</p>
  	>>>,

  "statement1": <<<
        <p>
        Фигуры двух цветов поставлены в ряд. [Сначала идут 8 жёлтых, потом 9 чёрных].
        Нужно, действуя по набору указаний, составленным и исполняемым по нижеперечисленным правилам, переставить фигуры так, чтобы число соседних разноцветных пар было наибольшим (в начале такая пара одна).
        Указания по перемещению фигур напоминают шахматные рокировки — указывается любой упорядоченный набор фигур и определяется, как их нужно между собой переставить.
        Указаний может быть несколько, они идут друг за другом и выполняются по следующим правилам.
        Сначала ряд фигур просматривается слева направо и первое указание выполняется столько раз, сколько оно может выполниться. Как только первое указание становится неприменимым, применяется второе указание. Но уже после первого успешного выполнения второго указания следующим снова применяется первое указание. Если ни первое, ни второе указания неприменимы, применяется третье указание, но опять же после первого успешного его применения осуществляется переход к первому указанию и так далее.
         </p>
          <p>
        Лучшим считается набор указаний, который приводит к наибольшему числу разноцветных пар фигур, стоящих рядом. Если количество таких пар у разных решений одинаково, то лучшим решением считается то, которое содержит меньше указаний. Если число указаний в решениях одинаково, то лучше тот набор указаний, который решает задачу меньшим числом операций замены.
        Лучшее решение сохраняется программой автоматически как рекорд. При желании можно также запомнить любой набор указаний (любое решение).
        </p>

        <p>
            Примечание. Описанный набор указаний является частным случаем нормального алгоритма Маркова. Андрей Андреевич Марков — советский математик, основоположник советской школы конструктивной математики — ввел формализованное понятие алгоритма (А.А.Марков называл его алгорифмом), которое наряду с машиной Тьюринга стало одним из самых употребимых определений алгоритма.
       <a href='https://ru.wikipedia.org/wiki/Нормальный_алгоритм'>Нормальный алгоритм</a>, <a href='https://en.wikipedia.org/wiki/Markov_algorithm'>Markov algorithm</a>
        </p>

      >>>,
	"help1":<<<
	    <p>Новая строчка указаний создается с помощью соответствующей кнопки.
           При составлении указания картинки объектов перетягиваются в окна правил. Для того, чтобы увеличить в правиле число окон, нужно перетянуть объект на один из уже перетянутых в правило объектов.
           Для правки указаний его строчки можно удалять соответствующими кнопками.
           Проигрывание алгоритма можно осуществить пошагово (можно делать обратные шаги), в анимационном режиме и мгновенно.
           Кнопка очищения возвращает ситуацию в исходное состояние.
        </p>
  	>>>,


  "statement2": <<<
        <p>
       Всем известно, что математике оперирует множеством различных правил и алгоритмов. Однако долгое время у алгоритма не было математического определения. Это стало препятствием в развитии математики, так как нужно было научиться доказывать алгоритмическую неразрешимость некоторых задач. В ответ на это вызов появилось несколько эквивалентных математических определений понятия алгоритма. Например, машина Тьюринга. Менее известным является нормальный алгорифм Маркова, хотя автор знаменитого труда «Искусство программирования» Дональд Кнут считал это определение наиболее удачным. В этом сюжете вы познакомитесь с этим определением
        (<a href='https://ru.wikipedia.org/wiki/Нормальный_алгоритм'>Нормальный алгоритм</a>, <a href='https://en.wikipedia.org/wiki/Markov_algorithm'>Markov algorithm</a>).

       Перед вами будет стоять задача создания калькулятора для вычислений выражений вида
       1+1-(1+1-1+1)+... +(-1-1) таких, что их результат может быть одним из трёх: 0, 1 или 2.
       Калькулятор будет строится как последовательность указаний следующего вида.
       В левой части каждого указания указывается строка из допустимых символов, которые в нашей задаче берутся из множества {1, +, -, (, )}. В правой части указывается строка, на которую будет заменена данная строка. Указаний может быть сколько угодно, они записываются друг за другом, а выполняются так:
       - входная строка просматривается слева направо и первое указание применяется до тех пор пока не перестанет быть применимо,
       - тогда начинает применяться второе указание, но как только оно выполнится один раз, следующим снова начинает применяться первое правило,
       - третье правило будет применено только если не выполняются предшествующие ему первое и второе правило; но после первого его выполнения осуществляется переход к первому правилу и т.д.
       Представленный алгоритм проверяется на большом числе примеров от простых вида
       1+1-1-1=1 до сложных с вложенными скобками, например, (1+(1+1))-((1+1)-1).
       Вы можете проверить самостоятельно придумать пример и проверить как на нем сработает построенный алгоритм.

       Лучшим считается алгоритм, который правильно выполнится на большем числе генерируемых программой примеров. Если на всех примерах алгоритм сработает правильно, то лучшим будет алгоритм с меньшим числом правил. Если же и число правил будет одинаковым, то лучшим будет решение меньшей длины (с меньшим суммарным числом символов).

        </p>
      >>>,
	"help2":<<<
	    <p>Новая строчка указаний создается с помощью соответствующей кнопки.
           При составлении указания картинки объектов перетягиваются в окна правил. Для того, чтобы увеличить в правиле число окон, нужно перетянуть объект на один из уже перетянутых в правило объектов.
           Для правки указаний его строчки можно удалять соответствующими кнопками.
           Проигрывание алгоритма можно осуществить пошагово (можно делать обратные шаги), в анимационном режиме и мгновенно.
           Кнопка очищения возвращает ситуацию в исходное состояние.
</p>



<p>

Пример (из Википедии).
Нормальный алгоритм Маркова, который преобразует двоичные числа в «единичные» (в которых записью целого неотрицательного числа N является строка из N палочек). Например, двоичное число 101 преобразуется в 5 палочек: |||||.
<p>
Алфавит:
{ 0, 1, | }
</p>
<p>
Правила:
1.	|0 > 0||
2.	1 > 0|
3.	0 >  (пустая строка)
</p>
<p>
Исходная строка:
101
 </p>
 <p>
Выполнение:
1.	0|01
2.	00||1
3.	00||0|
4.	00|0|||
5.	000|||||
6.	00|||||
7.	0|||||
8.	|||||
</p>
<p>
Примечание. Андрей Андреевич Марков — советский математик, основоположник советской школы конструктивной математики — ввел формализованное понятие алгоритма (А.А.Марков называл его алгорифмом), которое наряду с машиной Тьюринга стало одним из самых употребимых определений алгоритма.
</p>
  	>>>,

 "toolbox": {
        "weed": "сорняк",
        "flower": "цветок",
        "carrot": "морковь",
        "empty": "пусто",

        "castle": "ладья",
        "king": "король"
    },

     "label": {
            "solution": "Решение",
            "record": "Рекорд",

            "difference": "Число различий",
            "direction_amount": "Число указаний",
            "pair_amount": "Число пар",
            "algorithm_step": "Число замен",

            "example_amount": "Число примеров",
            "rule_amount": "Число правил",
            "algorithm_length": "Длина алгоритма",

            "wrongPair": "Неправильных соседей",

            "warning": " замен выполнено. Возможно, произошло зацикливание.\n Вы можете продолжлить выполнение или остановить его."
     },

     "button": {
            "add_direction": "добавить указание",
            "delete_direction": "удалить указание",

             "add_rule": "добавить правило",
             "delete_rule": "удалить правило",

              "delete_element_from_direction": "удалить из указания",
               "delete_element_from_rule": "удалить из правила",
              "paste_warning": "такого элемента нет в другой части указания",



            "step_forward": "шаг вперед",
            "step_backward": "шаг назад",
            "execute": "выполнить",
            "animate": "анимация",
             "stop": "остановка",
            "reset": "в начальное состояние",
            "edit": "перейти к редактированию"
        }


}