/*Это файл с текстами для программы.
Файл оформляется в виде расширенного json формата, в отличие от json здесь допустимы комментарии, такие как этот,
и многострочные строки, которые начинаются на <<< и заканчиваются >>> */
{
    /*Первые несколько строчек текста необходимы всегда, они описывают заголовок задачи, тексты условия и помощи*/

    "title": "Алгорифм Маркова",
     "title0": "Прополка",
     "title1": "Рокировки",
      "title2": "Алгорифм Маркова — необычный калькулятор",


     /*Этот заголовок пишется вверху окна. Цифра 1 означает, что заголовок используется для первого уровня*/
    "statement0": <<<
        <p>
        В огороде грядка морковки заросла сорняками. Нужно удалить часть сорняков, проредить

        или пересадить морковку так, чтобы слева и справа от каждой морковки ничего не

        росло. Освободившееся от сорняков пространство нужно засадить цветами (желаемый

        результат показан на рисунке).
        </p>
        <p>
        Работу осуществляет автомат, управление которым осуществляется через указания, что и

        чем надо заменить. Указания для робота записываются в строчках.

        </p>
        <p>
        Автомат движется слева направо и выполняет первое указание, пока его можно выполнить.

        Когда оно не применимо, автомат выполняет второе указание, а после его выполнения снова

        пробует применить первое указание. Если автомат не может выполнить ни первое ни второе

        указание, он пробует выполнить третье и, если оно применимо, то сразу после выполнения

        переходит к первому указанию и так далее.
        </p>
        <p>
        В задаче есть одно ограничение: в обоих частях указания должно быть одинаковое число

        объектов которое не больше 3.
        </p>
        <p>
        Лучшим считается набор указаний, который приводит к меньшему числу различий между

        исходным и желаемым состоянием грядки. Если автомат выполняет работу правильно,

        то лучшим считается тот, у которого меньше указаний. Если число указаний в решениях

        одинаково, то лучше тот набор указаний, который позволяет быстрее обработать грядку.
        </p>
        <p>
        Лучшее решение сохраняется программой автоматически как рекорд. При желании можно

        также запомнить любой набор указаний (любое решение).
        </p>
      >>>,
	"help0":<<<
	    <p>
	    Новая строчка указаний создается с помощью соответствующей кнопки.

      </p>
      <p>
      При составлении указания картинки объектов перетягиваются в окна указаний. Для того,

      чтобы увеличить число окон в очередном указании, в него нужно перетянуть новый объект.

      Для правки указаний строчки можно удалять соответствующими кнопками.

      Проигрывание алгоритма можно осуществить пошагово (можно делать обратные шаги), в

      анимационном режиме и мгновенно.
      </p>
      <p>
      Также имеется кнопка для возвращения грядки в исходное состояние (сохраняя указания).

      После проигрывания программы можно вернуться в режим редактирования, нажав

      соответствующую кнопку, и продолжить составление или исправление указаний, добавляя

      новые строки соответствующей кнопкой, удаляя ненужные и меняя сами указания.
  </p>
  	>>>,

  "statement1": <<<
        <p>
        Ладьи и короли двух цветов поставлены в ряд.
        </p>

        <p>
        Нужно, составить набор указаний определенного вида, чтобы расположить фигуры

        так, чтобы все ладьи стояли рядом и все короли стояли рядом. При этом порядок цветов для

        каждой из фигур должен поменяться на обратный. Например, если было лКЛкЛКлкЛклклК,

       то правильным ответом будет одна из двух последовательностей ллЛлЛЛлКкккКкК или

       КкккКкКллЛлЛЛл (маленькими и большими буквами обозначены фигуры разных цветов).

        Указания по расположению фигур строятся так — в левой части указывается любой

        упорядоченный набор фигур, а в правой тот набор, на который его надо заменить.

        Указаний может быть несколько, они идут друг за другом и выполняются по следующим

        правилам.
        </p>
        <p>

        Сначала ряд фигур просматривается слева направо и первое указание выполняется

        столько раз, сколько оно может выполниться. Как только первое указание становится

        неприменимым, применяется второе указание. Но уже после первого успешного выполнения

        второго указания следующим снова применяется первое указание. Если ни первое, ни второе

        указания неприменимы, применяется третье указание, но опять же после первого успешного

        его применения осуществляется переход к первому указанию и так далее.
        </p>
        <p>

        В задаче есть одно ограничение: число объектов в каждой части указания не больше 3.
        </p>
        <p>

        Если в результате применения правил количество фигур каждого вида и цвета

        изменится, решение не учитывается.

        Первым критерием для оценки качества решения является число пар, в которых ладья

        и король стоят рядом — чем меньше, тем лучше.

        Если количество таких пар равно 1 (то есть все ладьи стоят рядом и все короли стоят

        рядом), то лучшим решением будет то, в котором меньше нарушается требуемый

        порядок фигур каждого вида. Например, если дано решение лЛЛЛлллККккккК, то число

        нарушений порядка равно 6.

        Если же оба этих параметра одинаковы, то лучшим считается решение с меньшим

        числом указаний.
         </p>
         <p>

        Лучшее решение сохраняется программой автоматически как рекорд. При желании можно

        также запомнить любой набор указаний (любое решение).

        Обратите внимание на две последние кнопки в вертикальном меню. Одна из них добавляет

        символ или символы, указанные в правой части указания, в начало строки, другая удаляет

        символы, записанные в левой части указания. Будьте осторожны! Если указание на

        добавление стоит в начале алгоритма, то произойдёт бесконечное добавление символов в

        начало строки и алгоритм зациклится!
        </p>
        <p>

        Также имеются фигуры красного цвета — это вспомогательные фигуры, которые могут

        добавляться для выполнения каких-то операций, а в конце должны быть удалены с рабочего

        поля.
        </p>

      >>>,
	"help1":<<<
	    <p>

	    Новая строчка указаний создается с помощью соответствующей кнопки.

	     </p>

	      <p>

      При составлении указания картинки объектов перетягиваются в окна указаний. Для того,

      чтобы увеличить в правиле число окон, нужно перетянуть объект в строку указания.

      Для правки указаний его строчки можно удалять соответствующими кнопками.

      Проигрывание алгоритма можно осуществить пошагово (можно делать обратные шаги), в

      анимационном режиме и мгновенно.

       </p>

        <p>

      Имеется кнопка для возвращения ситуации в исходное состояние без изменения указаний.

      После проигрывания программы можно вернуться в режим редактирования, нажав

      соответствующую кнопку, и продолжить составление или исправление указаний, добавляя

      новые строки соответствующей кнопкой, удаляя ненужные и меняя сами указания.

        </p>

        <p>
        Примечание. Андрей Андреевич Марков — советский математик, основоположник советской школы конструктивной математики — ввел формализованное понятие алгоритма (А.А.Марков называл его алгорифмом), которое наряду с машиной Тьюринга стало одним из самых употребимых определений алгоритма.
        (<a href='https://ru.wikipedia.org/wiki/Нормальный_алгоритм'>Нормальный алгоритм</a>, <a href='https://en.wikipedia.org/wiki/Markov_algorithm'>Markov algorithm</a>)
        </p>
  	>>>,


  "statement2": <<<
        <p>
       Всем известно, что математике оперирует множеством различных правил и алгоритмов. Однако долгое время у алгоритма не было математического определения. Это стало препятствием в развитии математики, так как нужно было научиться доказывать алгоритмическую неразрешимость некоторых задач. В ответ на это вызов появилось несколько эквивалентных математических определений понятия алгоритма. Например, машина Тьюринга. Менее известным является нормальный алгорифм Маркова, хотя автор знаменитого труда «Искусство программирования» Дональд Кнут считал это определение наиболее удачным. В этом сюжете вы познакомитесь с этим определением
        (<a href='https://ru.wikipedia.org/wiki/Нормальный_алгоритм'>Нормальный алгоритм</a>, <a href='https://en.wikipedia.org/wiki/Markov_algorithm'>Markov algorithm</a>).
        </p>

        <p>

       Перед вами будет стоять задача создания калькулятора для вычислений выражений вида
       1+1-(1+1-1+1)+... +(-1-1) таких, что их результат может быть одним из трёх: 0, 1 или -1.
       Калькулятор будет строится как последовательность указаний следующего вида.
       В левой части каждого указания указывается строка из допустимых символов, которые в нашей задаче берутся из множества {1, +, -, (, ), A, B}. В правой части указывается строка, на которую будет заменена данная строка. Указаний может быть сколько угодно, они записываются друг за другом, а выполняются так:
       </p>
       <p>
       - входная строка просматривается слева направо и первое указание применяется до тех пор пока не перестанет быть применимо,
       </p>
       <p>
       - тогда начинает применяться второе указание, но как только оно выполнится один раз, следующим снова начинает применяться первое правило,
       </p>
       <p>
       - третье правило будет применено только если не выполняются предшествующие ему первое и второе правило; но после первого его выполнения осуществляется переход к первому правилу и т.д.
       </p>
       <p>
       Представленный алгоритм проверяется на большом числе примеров от простых вида
       1+1-1-1=1 до сложных с вложенными скобками, например, (1+(1+1))-((1+1)-1).
       Вы можете проверить самостоятельно придумать пример и проверить как на нем сработает построенный алгоритм.
      </p>
      <p>
      Обратите внимание, на символы A и B – это вспомогательные символы, которые могут

      использоваться в процессе вычислений, но не должны оставаться в строке результата

      (кнопка внизу вертикального меню позволяет добавить в начало строки символы,

      записанные в правой части указания; другая кнопка позволяет убирать вхождения символов

      стоящих в левой части указания; будьте осторожны - если указание на добавление стоит

      в начале алгоритма, то произойдёт бесконечное добавление символов в начало строки и

      алгоритм зациклится!).
      </p>
      <p>
      Лучшим считается алгоритм, который правильно выполнится на большем числе

      генерируемых программой примеров. Если на всех примерах алгоритм сработает правильно,

      то лучшим будет алгоритм с меньшим числом правил.

        </p>
      >>>,
	"help2":<<<
	    <p>

	    Новая строчка указаний создается с помощью соответствующей кнопки.

	    </p>

	    <p>

      При составлении указания картинки объектов перетягиваются в окна указаний. Для того,

      чтобы увеличить в указании число окон, нужно перетянуть на него новый объект.

      Для правки указаний его строчки можно удалять соответствующими кнопками.

      Проигрывание алгоритма можно осуществить пошагово (можно делать обратные шаги), в

      анимационном режиме и мгновенно.
      </p>
      <p>

      После проигрывания программы можно вернуться в режим редактирования, нажав

      соответствующую кнопку, и продолжить составление или исправление указаний, добавляя

      новые строки соответствующей кнопкой, удаляя ненужные и меняя сами указания.
</p>



<p>

Пример (из Википедии).
Нормальный алгоритм Маркова, который преобразует двоичные числа в «единичные» (в которых записью целого неотрицательного числа N является строка из N палочек). Например, двоичное число 101 преобразуется в 5 палочек: |||||.
<p>
Алфавит:
{ 0, 1, | }
</p>
<p>
Правила:
1.	|0 > 0||
2.	1 > 0|
3.	0 >  (пустая строка)
</p>
<p>
Исходная строка:
101
 </p>
 <p>
Выполнение:
1.	0|01
2.	00||1
3.	00||0|
4.	00|0|||
5.	000|||||
6.	00|||||
7.	0|||||
8.	|||||
</p>
<p>
Примечание. Андрей Андреевич Марков — советский математик, основоположник советской школы конструктивной математики — ввел формализованное понятие алгоритма (А.А.Марков называл его алгорифмом), которое наряду с машиной Тьюринга стало одним из самых употребимых определений алгоритма.
</p>
  	>>>,

 "toolbox": {
        "weed": "сорняк",
        "flower": "цветок",
        "carrot": "морковь",
        "empty": "пусто",

        "castle": "ладья",
        "king": "король"
    },

     "label": {
            "solution": "Решение",
            "record": "Рекорд",

            "difference": "Число различий",
            "direction_amount": "Число указаний",
            "pair_amount": "Число пар",
            "algorithm_step": "Число замен",

            "example_amount": "Правильно вычисленных примеров",
            "rule_amount": "Число правил",
            "algorithm_length": "Длина алгоритма",

            "wrongPair": "Неправильных соседей",
            "wrongOrder": "Нарушен исходный порядок",

            "warning_level1": "Состав фигур изменился!",

            "warning": " замен выполнено. Возможно, произошло зацикливание.\n Вы можете продолжлить выполнение или остановить его."
     },

     "button": {
            "add_direction": "добавить указание",
            "delete_direction": "удалить указание",

             "add_rule": "добавить правило",
             "delete_rule": "удалить правило",

              "delete_element_from_direction": "удалить из указания",
               "delete_element_from_rule": "удалить из правила",
              "paste_warning": "такого элемента нет в другой части указания",



            "step_forward": "шаг вперед",
            "step_backward": "шаг назад",
            "execute": "выполнить",
            "animate": "анимация",
             "stop": "остановка",
            "reset": "в начальное состояние",
            "edit": "перейти к редактированию"
        }


}