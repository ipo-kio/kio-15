package kio._2015;

import com.fasterxml.jackson.databind.JsonNode;
import kio.checker.KioProblemChecker;

import java.util.ArrayList;
import java.util.List;

public class MarkovChecker2015 extends KioProblemChecker {

    private static final String[] allExamples = "1-1+1-1+1|||-1-1-1+1+1|||(1-1-1)+1-0|||(0-1)-(1+1)-(-1-1)|||1-(((1-1)-1)+1)|||1|||1-1-1+1+1-1+1-1+1|||1-1|||(1-(1+1)+1)|||(1-1+1)|||1+1-1|||1-1-1|||1-(1-1+1+1)|||(1-1+(1-1)+1-1+1)|||1-(1+1-1-1)|||(1-1)|||1-(1-1+1)|||1-1+1|||((1-1-1+1-1+1)+1)|||(1+1+1+1-(1+1+1))|||(1-1-1)|||1-(1-1)|||1-1-1+1-1|||((1-1-1+1+1)-1)|||1-(1+1)|||(1+1-1+1-1)|||(1-1+1-1-1)|||1+((1-1-1)-1)|||1-1-1-1+1|||1+(1-1-1-1+1)|||1-1+1-1|||1+1-(1+1+1-1+1)|||(1-(1+1-1+1))|||1+((1-1)-1+1)|||1+1-1-1|||(1+1-1)|||(1-1+1+1-1)|||1-((1-1)+1)|||(1-(1+1)+1-1+1)|||(1-(1-1))|||1-1+(1-1)|||(1-1-(1-1)-1+1+1)|||1-1+(1-1+1-1)|||1-1-1+(1+1+1-1)|||(1+1-1-1+1)|||1-(1+1+1-1-1+1-1)|||1-1-1+1|||(1+1-1-1)|||1-(1+1-1-1+1-1-1+1)|||1-(1+(1-1-1))|||1-1+1+(1-(1+1-1+1))|||1-1+1+1-1-1-1+1-1|||(1-1+1-1)|||1+1+1-1-1|||1-1-(1+(1-1-1))|||((1+(1-1-1))+1+1-1)|||(1-1-(1-1-1))|||1-(((1-1)+1)-1)|||1+1-1+1-1-1-(1-1+1)|||(1+1-(1+1)-1)|||(1+1-((1+1+1)-1))|||1-1+(1-(1+1)+1+1)|||(1-1-((1-1)-1))|||1-(1-(1+1+1-1)+1)|||1-(1+1+1-1)|||1-((1+(1-1))+1-1)|||1+1+(1-1-1)|||((1+1)-(1+1))|||(1+(1-1)+1-1)|||((1-1)+1)|||1+(1-1)|||1-1+1-1-1|||(1-1-1+1)|||(1-(1-(1-1+1)))|||(1-1-1-1+1+1+1)|||(1+(1-1+1-1-1)+1)|||1-(1+1-1)|||1+1+1-1-1-1|||1+1-1+1-1|||((1-1-1-1)+1)|||1-1-(1-1+1)|||(1-1-1+1-1)|||1+1-1-1-1|||(1-(1+1+1-1))|||(1-(1-1)+1-1)|||(1-1+1-1+1-1-1)|||(1+1-1+1-1-1)|||1-1-1+(1+1)|||(1+1-1-(1+1-1))|||1+(1-1-1)|||(1-(1-1+1))|||(((1+1-1)+1)-1)|||(1-1+(1-1)-1)|||1+1-((1-1)+1)|||1-1-((1+1-1)-1-1)|||((1+1-1-1-1)-1+1)|||1-1+1+1-1|||(1+1-1-1+(1-1-1))|||1-1+1-1-(1-1+1-1)|||(1-1-1+1-1+1)|||1+1-1-1+1+(1-1)|||(1+(1-1))|||(1+1+1-1-1)|||(1+1+1-1-1-1)|||1-1+1-1-(1-1)|||1+1-(1+1+1-1-1)|||1-1+1-(1-1+1)|||(1-(1+(1-1-1))-1)|||(1-1+(1-1)+1)|||(1+1-(1+1))|||1+1-(1+1)|||(1-(1+1-1))|||1-1+(1+1-1-1-1)|||(1+1-1-1+1+(1-1))|||(1-(1+1-1+1-1-1))|||(1-1+1-(1+1-1)+1)|||1-1+((1-1+1-1)-1+1)|||(1-(1-1)-1)|||(1-1-1-(1+1-1-1))|||1+1-(1+1+1+1-1-1-1)|||(1-1-(1-1+1-1))|||1+((1-1)-1)|||(1-1-(1+1-1-1)+1)|||(1+1+1-(1-1+1+1))|||1-1+1+1-1-1-1|||1+1+(1-1-1+1-1)|||(((1-1)+1)-1-1+1)|||1-((1+1)+1-1-1+1)|||1+1+1-(1+1)|||(1-1-(1-1+1))|||1-1+1+((1-1)-1)|||(1+1-1-1+1+1-1-1)|||((1-1)+1-1-1)|||1-1-1-1+(1+1+1)|||1-(1-1+(1+1)-1+1)|||1-1-((1-1)-1+1+1)|||1-1+1-(1+1-1-1)|||(1-1-1+(1+1))|||1-((1+1)+1-1)|||1-1+(1+1-1-1-1+1)|||1-((1+1)-1)|||((1-1-1+1)-1+1)|||1+1-1-(1-1)|||(1-1+(1-1+1))|||(1-1+1-(1+1))|||1-1+(1-1-1)|||(1-1+1-1+(1-1+1))|||(1-(1+1))|||(1+1+(1-1+1-1-1))|||1+(1-1+1-1)|||(1-1+1+1+1-(1+1))|||(1+(1-1-1-1))|||(1-1+1-1+(1-1-1))|||((1+1-1+1-1+1)-1)|||((1-1-1+1-1)+1)|||(1-1-1-1+1)|||1-(1+1-1+1)|||(1+(1-1-1+(1-1)))|||(1+(1-1-1)+1)|||1-(1+1-(1+1+1-1))|||1+1-1-(1+1)|||(((1-1)-1)+1-1)|||1-(1+1-(1-1))|||1+(1+(1-(1+1)-1))|||1+(1+1-1-1)|||1-(1-1+1-1+1)|||1-1+1+(1-1)|||1+(1-(1+1+1))|||1-(1+1-1-1+1)|||((1-1)-1)|||1+1-1+1-(1-1+1)|||(1-1-(1-(1+1))-1)|||(1+(1-1)-1-1)|||1-(1-(1-1))|||1+(1-1-1+1)|||((1+1-1)-(1+1))|||1-1-1+1+1|||(1-(1-(1-1+1)+1))|||(1+(1-1-1+1))|||(1+1-1-1+1-1)|||(1-1-(1+1+1-1-1))|||1-((1+1-1)-1)|||1-1-(1-1+1-1)|||(1+1-1-1-(1-1))|||1-1-1-1+(1+1-1)|||1+((1-(1+1))+1-1-1)|||(1-1+1-1-1+1)|||1-(1-(1-1-1)-1)|||1-(1-1-(1-1))|||(1-(1-(1+1-1)))|||1-1-(1-1)|||1-(1+1+1-1-1)|||((1-1+1)-1)|||((1-1+1-1)-1)|||((1+1)-1)|||1+(1-1-1-1)|||(1-1+(1+1-(1+1)))|||((1-1)-1+1)|||1-(1-1-(1-1-1))|||1+1-1-(1+(1-1))|||1-1-1+1-1+1|||(1+1+1-(1+1))|||1-1+(1-1-1+1)|||((1-1)-1+1+1-1+1)|||1-1-(1-1-1+1)|||(1-1+1-(1-1+1))|||(1+((1+1)-1)-1)|||(1+1-1-1-1)|||(1-1+(1+1-1))|||(1-(1+1-1-1))|||(1-1-1-(1-1))|||1-1+1+1-1-1+1-1|||((1+1-1-1)+1)|||(1-1+1+1-1+1-1)|||(1-1+1+1-1-1)|||1-1-(1+1-1-1)|||(1-(1-1+1-1+1))|||1-1-(1+1-1)|||1-1-(1-1-1)|||1-1-1+(1+1-1)|||1+1+1-(1+1+1)|||1-1-1-(1-1)|||(1-1-1-(1-1-1))|||(1-1+1+1-1-1+1)|||((1+1-1)-1+1-1)|||(1-1-(1+1-1))|||1-(1-1+1-1)|||(1+1-1+(1-1+1-1))|||(1-(1-1+1+1))|||(1-1-1+1+1-1)|||1+1+1-(1+1+(1+1))|||(1-((1+1)-1))|||1-((1-1+1)-1)|||(1+(1-1-1))|||1-1-1-1+1+1|||1-1-1+(1-1)|||(1-1-1+1-1-1+1)|||(1-(1-1+1-1))|||((1+(1-1-1))-1)|||(1+(1-1-1)-1)|||(1-1-(1-1+1-1-1))|||1-(1+1-(1-1+1))|||1+(1-1-(1+1))|||1+1-1-1+1|||1-(1+(1-1+1))|||(1-1+1-1+1)|||1-(1+1+1+1-(1+1))|||(1-(1-1+1-1)-1)|||(1+(1+1-1)-1)|||((1-1+1-1-1)+1)|||(1-1-1-1+1+1)|||(1-(1-1)-(1+1))|||((1+1-(1+1))-1)|||(1-1-1+1+1)|||1-(1-(1-1-1))|||(1-((1-1)+1+1))|||1-1-1-(1+(1-1-1-1))|||(1-1-1+1+1+1-1)|||(1-1+(1+1-1)-1-1)|||1-(1-1-1+1)|||(1-1+1-(1-1))|||((1-1-1)+1-1)|||((1-1+1+(1-1))-1)|||(1+1-(1-1)-1)|||1-1-1+(1-1+1)|||(1-1-(1-(1+1)))|||((1-1+1)+(1-1))|||1+1-1-1+1-1|||(1-1+1-(1-1+1+1))|||1-(1-1-1+1+1)|||(((1-1)+1-1)-1+1)|||1+1-1-1+1-1+1|||(1-(1+1-1)+1-1+1)|||1+(1-(1+1)+1-1)|||(1+1-(1+1+1-1+1))|||1-1+1-1+1-1|||1-(1+1+1-1-1+1+1-1)|||1-(1-1+1-1-1+1)|||1-(1+1-1+1-1)|||((1+1-1-1)-1)|||(1-1+1+(1-1))|||(1+1-(1+1+1))|||1-1+1+1-1-1+1|||1-(1-(1+1)+(1-1+1))|||1+((1-1)-(1+1-1))|||(1-1-(1-1))|||(1-((1+1)+1)+1+1)|||1+1+1-(1+1-1+1)|||1+1-1-(1+1-1-1)|||((1-1+1)+1-1)|||1-1-1-(1-1-1)|||1-1+(1+1-1-1)|||1-(1+(1+1-1)+1-1-1)|||1-1+(1+1-1-(1+1))|||1-1+(1-(1+1-1-1))|||1+(1-(1+1+1-1))|||(1-1+(1-1))|||1+1+1-1-(1-1+1)|||1+1-1-1-(1-1)|||1-(1-(1-1+1)+1)"
            .split("\\|\\|\\|");
    private static final String[] allAnswers = new String[allExamples.length];

    static {
        MarkovExpressionsEvaluator evaluator = new MarkovExpressionsEvaluator();
        /*for (int i = 0; i < allExamples.length; i++)
            allAnswers[i] = evaluator.eval(allExamples[i])
            TODO report ctrl + shift Enter in this situation does not work
        */
        for (int i = 0; i < allExamples.length; i++)
            allAnswers[i] = evaluator.eval(allExamples[i]);
    }

    private int level;

    public MarkovChecker2015(int level) {
        this.level = level == 1 ? 2 : level;
    }

    @Override
    protected void run(JsonNode solution) {
        JsonNode rulesNode = solution.get("rules");
        if (rulesNode == null || !rulesNode.isArray())
            return;

        List<String> rules = new ArrayList<>();
        for (JsonNode jsonNode : rulesNode) {
            String ruleText = jsonNode.asText();
            if ("_:_".equals(ruleText))
                continue;
            rules.add(ruleText);
        }

        MarkovAutomata automata = new MarkovAutomata(rules);

        if (level == 0)
            runCarrots(automata);
        else
            runCalculator(automata);
    }

    //ridgeDiff различий, ruleAmount указаний, applyOperations замен
    public void runCarrots(MarkovAutomata automata) {
        MarkovString start = new MarkovString("wecececefececeww");
        MarkovString golden = new MarkovString("wwcwwccwwwcccwww");

        try {
            int operations = automata.go(start);

            int differences = 0;
            for (int i = 0; i < start.length; i++)
                if (start.symbols[i] != golden.symbols[i])
                    differences++;

            set("ridgeDiff", differences);
            set("ruleAmount", automata.getRulesCount());
            set("applyOperations", operations);
        } catch (Exception e) {
            System.out.println("Error while running markov automata: " + e.getMessage());
        }
    }

    //correctAmount процент примеров, ruleAmount правил
    private void runCalculator(MarkovAutomata automata) {
        try {
            int correct = 0;
            for (int i = 0; i < allExamples.length; i++) {
                String example = allExamples[i];
                String answer = allAnswers[i];
                MarkovString ms = new MarkovString(example);
                automata.go(ms);
                if (ms.equalsToString(answer))
                    correct++;
            }

            set("ruleAmount", automata.getRulesCount());
            set("correctAmount", correct);
        } catch (Exception e) {
            System.out.println("Error while running markov automata: " + e.getMessage());
        }
    }
}
